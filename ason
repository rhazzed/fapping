#!/bin/sh
#######################################################
# ason - Get ADS-B data from a PiAware server and display it as text.
#
# HISTORICAL INFORMATION -
#
#  2017-05-25  msipin  Created.
#  2017-05-26  msipin  Replaced lattitude/longitude with range (in nm).
#   (** SEE BELOW **)  NOTE: REQUIRES ACCESS to "/receiver.json", which you
#   (** SEE BELOW **)        get by adding an appropriate entry in the
#   (** SEE BELOW **)        /etc/lighttpd/conf-available/50-piaware.conf file.
#  2017-05-26  msipin  Improved range-calculation logic slightly (it's still just
#                      a back-of-the-envelope guess...).
#  2017-06-03  msipin  Adapted to piAware already exposing the two files we need -
#                      receiver.json and aircraft.json.
#     NOTE: THIS ELIMINATES THE lighttpd ENTRY REQUIRED BY THE 2017-05-26 RELEASE!!
#  2020-10-09  msipin  Changed altitude key from "altitude" to "alt_baro" due to post-2017 PiAware change
#  2020-11-05  msipin  Changed ground speed from "speed" to "gs", and its datatype from INTEGER to FLOAT
#                      due to post-2017 PiAware change. Changed "vert_rate" to "baro_rate", again, due to
#                      post-2017 PiAware change.
#  2020-11-06  msipin  Adapted to use *both* "baro_rate" and "geom_rate"
#######################################################

tmp_file1=/var/tmp/$$.ason.1

trap "rm -f $tmp_file1;exit 0" 0 1 2 3 6 12 15

usage() {
	echo
	echo "usage: $0 <ip_address>"
	echo
}


if [ $# -lt 1 ]
then
	usage;
	exit 2;
fi

IP_ADDR=$1


rm -f $tmp_file1



# Pickup the receiver's lat/long
wget -q http://${IP_ADDR}:8080/dump1090-fa/data/receiver.json -O - | sed "s/{//g" | sed "s/}//g" | sed "s/,/ /g" | sed "s/\"//g" | sed "s/ : /:/g" | awk '{ for (i=1;i<=NF;i++){print $i;};}' | awk -F":" '{ if (($1 == "lat") || ($1 == "lon")) print $1,$2; }' >> $tmp_file1

rx_lat=`grep "^lat " $tmp_file1 | awk '{ print $2 }'`
rx_lon=`grep "^lon " $tmp_file1 | awk '{ print $2 }'`

#echo "RX_LAT = "$rx_lat
#echo "RX_LON = "$rx_lon
## For debugging, prolly wanna exit here...
#exit 2



tput clear

while [ 1 ]
do
    tput home
    # Determine how big the screen is
    rows=`echo "lines"|tput -S`
    cols=`echo "cols"|tput -S`

    lines_to_display=`expr $rows - 2`


    wget -q http://${IP_ADDR}:8080/dump1090-fa/data/aircraft.json -O - | grep '"hex":' | sed "s/{//g" | sed "s/}//g" | sed "s/,/ /g" | sed "s/\"//g" | sed "s/ mlat:.*.tisb/ tisb/" | sed "s/ tisb:.*.messages/ messages/" | awk '{

for (i=1; i<= NF; i++) {

  print $i;
}

}' | awk -F":" -v RX_LAT=${rx_lat} -v RX_LON=${rx_lon} 'BEGIN {

  ## Debugging - Show rx_lat and rx_long
  ##printf "DEBUG: rx_lat=%s, rx_lon=%s\n", RX_LAT, RX_LON

  # (Approx.) Miles-per-degree of latitude/longitude - accuracy is
  # not as important; only being used for rough estimation
  # of RANGE
  mpd_lat = 69.0535	# Avg, equator-to-pole
  mpd_lon = 53.0000	# At 40 degrees N/S

  # Display header
  #printf "   ICAO |CALLSIGN|LEVEL |GSPD|TRAK|LATTITUDE  |LONGITUDE  |VRT_RT|VRTRT2|SQWK |RSSI        ICAO |CALLSIGN|LEVEL |GSPD|TRAK|LATTITUDE  |LONGITUDE  |VRT_RT|VRTRT2|SQWK |RSSI  "
  printf "   ICAO |CALLSIGN|LEVEL |GSPD|TRAK|RANGE |VRT_RT|VRTRT2|SQWK |RSSI        ICAO |CALLSIGN|LEVEL |GSPD|TRAK|RANGE |VRT_RT|VRTRT2|SQWK |RSSI  "

  # Initialize variables
  ICAO="";

  loop=1;
}{

  # ICAO = hex:4caab6
  # Found new plane
  if ($1 == "hex") {

    # Display old plane info
    RANGE=""
    if ((LAT != "") && (LON != "")) {
        DLAT=RX_LAT-LAT
        # Calculate approximate distance (in miles) of delta in latitude
	LAT_DELTA_MILES=DLAT*mpd_lat

        DLON=RX_LON-LON
        # Calculate approximate distance (in miles) of delta in longitude
	LON_DELTA_MILES=DLON*mpd_lon

        # Calculate the approximate range (in nautical miles)
        RANGE=sqrt((LAT_DELTA_MILES*LAT_DELTA_MILES)+(LON_DELTA_MILES*LON_DELTA_MILES))*0.868976
    }
    if (NR > 1) printf "%8s|%8s|%6s|%4.0f|%4.0f|%6.1f|%6s|%6s|%5s|%6s", toupper(ICAO), CALLSIGN, LEVEL, GSPD, TRACK, RANGE, VERT_RATE, VERT_RATE2, SQUAWK, RSSI

    loop++;
    if ((loop % 2) == 0) printf "\n"
    else printf "   "

    # Pickup new ICAO
    ICAO=$2

    # Erase old data
    CALLSIGN=""
    LEVEL=""
    GSPD=""
    TRACK=""
    LAT=""
    LON=""
    VERT_RATE=""
    VERT_RATE2=""
    SQUAWK=""
    RSSI=""
  }

  # CALLSIGN = flight:AAL1024
  if ($1 == "flight") CALLSIGN=$2

  # LEVEL = alt_baro:8575
  if ($1 == "alt_baro") LEVEL=$2

  # GSPD = gs:125
  if ($1 == "gs") GSPD=$2

  # TRACK = track:117
  if ($1 == "track") TRACK=$2

  # LAT = lat:33.261703
  if ($1 == "lat") LAT=$2

  # LON = lon:-114.065720
  if ($1 == "lon") LON=$2

  # VERT_RATE = baro_rate:-1024
  if ($1 == "baro_rate") VERT_RATE=$2

  # VERT_RATE2 = geom_rate:-1024
  if ($1 == "geom_rate") VERT_RATE2=$2

  # SQUAWK = squawk:0675
  if ($1 == "squawk") SQUAWK=$2

  # RSSI = rssi:-15.9
  if ($1 == "rssi") RSSI=$2

} END {

# Display last plane picked up
RANGE=""
if ((LAT != "") && (LON != "")) {
    DLAT=RX_LAT-LAT
    # Calculate approximate distance (in miles) of delta in latitude
    LAT_DELTA_MILES=DLAT*mpd_lat

    DLON=RX_LON-LON
    # Calculate approximate distance (in miles) of delta in longitude
    LON_DELTA_MILES=DLON*mpd_lon

    # Calculate the approximate range (in nautical miles)
    RANGE=sqrt((LAT_DELTA_MILES*LAT_DELTA_MILES)+(LON_DELTA_MILES*LON_DELTA_MILES))*0.868976
}
if (NR > 1) printf "%8s|%8s|%6s|%4.0f|%4.0f|%6.1f|%6s|%6s|%5s|%6s", toupper(ICAO), CALLSIGN, LEVEL, GSPD, TRACK, RANGE, VERT_RATE, VERT_RATE2, SQUAWK, RSSI

for (i=0; i < 40; i++) { printf "                                                                                                                                                             \n"; }

}' | sed "s/|   0.0|/|      |/g" | head -${lines_to_display}

sleep 4
done

echo

exit 0

